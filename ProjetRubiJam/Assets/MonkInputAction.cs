//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/MonkInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MonkInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MonkInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MonkInputAction"",
    ""maps"": [
        {
            ""name"": ""MonkActionMap"",
            ""id"": ""ce2dd305-0cdb-4f56-8819-f3caedbea362"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a5041cd4-4c1e-4bcc-b32d-fc3d3a94e30c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d0ecd840-5260-482d-b3f4-af6d6f2b06d7"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""c00ff8a2-9c8c-4cd7-98a9-a8a63f304852"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""204abcd8-14c9-4e5f-b116-c597ee42a12e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c7de9e47-c2c3-4b64-add2-b6bb7ed11873"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7bfca3c4-abe1-4e28-8ac8-44ec1cd0267c"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7f476433-484c-47bf-b083-1865324193e1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MonkActionMap
        m_MonkActionMap = asset.FindActionMap("MonkActionMap", throwIfNotFound: true);
        m_MonkActionMap_Move = m_MonkActionMap.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MonkActionMap
    private readonly InputActionMap m_MonkActionMap;
    private List<IMonkActionMapActions> m_MonkActionMapActionsCallbackInterfaces = new List<IMonkActionMapActions>();
    private readonly InputAction m_MonkActionMap_Move;
    public struct MonkActionMapActions
    {
        private @MonkInputAction m_Wrapper;
        public MonkActionMapActions(@MonkInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_MonkActionMap_Move;
        public InputActionMap Get() { return m_Wrapper.m_MonkActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MonkActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IMonkActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MonkActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MonkActionMapActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IMonkActionMapActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IMonkActionMapActions instance)
        {
            if (m_Wrapper.m_MonkActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMonkActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MonkActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MonkActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MonkActionMapActions @MonkActionMap => new MonkActionMapActions(this);
    public interface IMonkActionMapActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
